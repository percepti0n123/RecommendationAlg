import argparse
import logging
from tabulate import tabulate

from db.db import load_data



from dev.markdown_report import save_markdown_report
from recommendation_algo.services.recommendation_service import content_based_recommendations
from recommendation_algo.repository.task_repo import get_completed_task_ids

logging.basicConfig(filename="logs/recommendation.log", level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def main():
    parser = argparse.ArgumentParser(description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠")
    parser.add_argument('--student_id', type=int, help="ID —Å—Ç—É–¥–µ–Ω—Ç–∞", required=False)
    parser.add_argument('--export_path', type=str, help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV", required=False)

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    students, tasks, lessons, lesson_tasks, exam_results, exam_tasks, student_theme_progress = load_data()
    from db.db import create_data, insert_data
    create_data()
    insert_data()

    if any(df is None for df in [students, tasks, lessons, exam_results, exam_tasks, student_theme_progress]):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    student_id = args.student_id
    if not student_id:
        student_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞: "))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CB)
    completed_task_ids = get_completed_task_ids(student_id)

    # –ó–∞–ø—É—Å–∫ content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = content_based_recommendations(student_id)
    print("\nüìò Content-Based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

    if recommendations.empty:
        print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = recommendations[['id', 'theme_name', 'explanation', 'source']].head(20)
    print(tabulate(table, headers="keys", tablefmt="fancy_grid"))



    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if args.export_path:
        try:
            recommendations.to_csv(args.export_path, index=False)
            logging.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.export_path}")
            print(f"\nüìÅ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {args.export_path}")

            md_path = args.export_path.replace(".csv", ".md")
            save_markdown_report(recommendations, md_path, student_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

import matplotlib.pyplot as plt
from collections import Counter

def plot_explanation_distribution(recommendations):
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    explanation_flat = [e for expl in recommendations['explanation'] for e in expl]
    counts = Counter(explanation_flat)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ pie chart
    labels = counts.keys()
    sizes = counts.values()

    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=140)
    plt.title("üîç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    plt.axis("equal")
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
