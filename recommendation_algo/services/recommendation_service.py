import pandas as pd
from recommendation_algo.repository import student_repo, task_repo, forms_repo, progress_repo

def content_based_recommendations(student_id):
    """
    –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    - –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –∞–Ω–∫–µ—Ç—ã
    - –¢–µ–º—ã —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    - –ò—Å–∫–ª—é—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    - –û–±—ä—è—Å–Ω—è–µ—Ç –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
    student_info = student_repo.get_student_by_id(student_id)
    if student_info.empty:
        return pd.DataFrame()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    preferences = forms_repo.get_student_preferences(student_id)
    completed_task_ids = task_repo.get_completed_task_ids(student_id)
    tasks_with_theme = task_repo.get_tasks_with_themes()
    student_progress = progress_repo.get_student_theme_progress(student_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if isinstance(preferences, str):
        preferences = [p.strip() for p in preferences.split(',')]

    # –¢–µ–º—ã —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_threshold = 70.0
    low_progress_themes = student_progress[student_progress['progress'] < progress_threshold]['theme_id'].tolist()

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"\nüìå DEBUG –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")
    print("üîπ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:", preferences)
    print("üîπ –¢–µ–º—ã —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:", low_progress_themes)

    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    candidate_tasks = tasks_with_theme[~tasks_with_theme['id'].isin(completed_task_ids)]
    print("üîπ theme_id –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö:", candidate_tasks['theme_id'].unique().tolist())

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (–∞–Ω–∫–µ—Ç–∞)
    if preferences:
        pref_filtered = candidate_tasks[
            candidate_tasks['theme_name'].str.contains('|'.join(preferences), case=False, na=False)
        ]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {len(pref_filtered)} –∑–∞–¥–∞—á")
        candidate_tasks = pref_filtered

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    recommended_tasks = candidate_tasks[candidate_tasks['theme_id'].isin(low_progress_themes)]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º: {len(recommended_tasks)} –∑–∞–¥–∞—á")

    # Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
    if recommended_tasks.empty:
        recommended_tasks = candidate_tasks
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞—á –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è")

    # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    recommended_tasks = recommended_tasks.copy()
    recommended_tasks['explanation'] = recommended_tasks.apply(lambda task: [], axis=1)
    for i, task in recommended_tasks.iterrows():
        if any(pref.lower() in (task['theme_name'] or '').lower() for pref in preferences):
            recommended_tasks.at[i, 'explanation'].append("–∏–Ω—Ç–µ—Ä–µ—Å —É—á–µ–Ω–∏–∫–∞")
        if task['theme_id'] in low_progress_themes:
            recommended_tasks.at[i, 'explanation'].append("–Ω–∏–∑–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ")
        if not recommended_tasks.at[i, 'explanation']:
            recommended_tasks.at[i, 'explanation'].append("–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ")

    # –ò—Å—Ç–æ—á–Ω–∏–∫
    recommended_tasks['source'] = "content"

    return recommended_tasks[['id', 'section_id', 'description', 'complexity', 'theme_id', 'theme_name', 'explanation', 'source']]



from recommendation_algo.services.collaborative_service import get_collaborative_recommendations

def hybrid_recommendations(student_id, model_knn, exam_scores_matrix, tasks, exam_tasks, completed_task_ids):
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ content-based –∏ collaborative –ø–æ–¥—Ö–æ–¥–æ–≤.
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–µ —á–∞—Å—Ç–∏
    content_recs = content_based_recommendations(student_id)
    collab_recs = get_collaborative_recommendations(
        student_id, model_knn, exam_scores_matrix, tasks, exam_tasks, completed_task_ids
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
    all_recs = pd.concat([content_recs, collab_recs]).drop_duplicates(subset='id', keep='first')

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –≤ –æ–±–µ–∏—Ö ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    all_recs = all_recs.groupby('id', as_index=False).agg({
        'section_id': 'first',
        'description': 'first',
        'complexity': 'first',
        'theme_id': 'first',
        'theme_name': 'first',
        'explanation': lambda x: list(set(sum(x, []))),
        'source': lambda x: '+'.join(sorted(set(x)))
    })

    return all_recs